// <auto-generated />
using System;
using FidgetPro.Fidgetmaster.Business.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FidgetPro.Fidgetmaster.Business.Migrations
{
    [DbContext(typeof(FidgetContext))]
    [Migration("20190814135048_Auth")]
    partial class Auth
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FidgetPro.Fidgetmaster.Business.Models.Fidget", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color");

                    b.Property<string>("Name");

                    b.Property<long>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Fidgets");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Color = "Green",
                            Name = "Foo",
                            TypeId = 2L
                        });
                });

            modelBuilder.Entity("FidgetPro.Fidgetmaster.Business.Models.FidgetType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DesignedDate");

                    b.Property<bool>("IsBouncing");

                    b.Property<bool>("IsFlying");

                    b.Property<bool>("IsSpinning");

                    b.Property<string>("TypeName");

                    b.HasKey("Id");

                    b.ToTable("FidgetTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DesignedDate = new DateTime(2019, 8, 14, 13, 50, 48, 471, DateTimeKind.Utc).AddTicks(4444),
                            IsBouncing = false,
                            IsFlying = true,
                            IsSpinning = true,
                            TypeName = "Thingamajig"
                        },
                        new
                        {
                            Id = 2L,
                            DesignedDate = new DateTime(2019, 8, 14, 13, 50, 48, 471, DateTimeKind.Utc).AddTicks(7912),
                            IsBouncing = true,
                            IsFlying = false,
                            IsSpinning = true,
                            TypeName = "Domaflotitch"
                        },
                        new
                        {
                            Id = 3L,
                            DesignedDate = new DateTime(2019, 8, 14, 13, 50, 48, 471, DateTimeKind.Utc).AddTicks(7925),
                            IsBouncing = false,
                            IsFlying = false,
                            IsSpinning = false,
                            TypeName = "Chad"
                        });
                });

            modelBuilder.Entity("FidgetPro.Fidgetmaster.Business.Models.Fidget", b =>
                {
                    b.HasOne("FidgetPro.Fidgetmaster.Business.Models.FidgetType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
